<?php

/**
 * ProcessWire Integer Fieldtype
 *
 * Field that stores an integer value. 
 *
 * For documentation about the fields used in this class, please see:  
 * /wire/core/Fieldtype.php
 * 
 * ProcessWire 2.x 
 * Copyright (C) 2015 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://processwire.com
 * 
 */

class FieldtypeInteger extends Fieldtype {

	public static function getModuleInfo() {
		return array(
			'title' => 'Integer',
			'version' => 101,
			'summary' => 'Field that stores an integer',
			'permanent' => true, 
			);
	}

	public function ___getCompatibleFieldtypes(Field $field) {
		$fieldtypes = parent::___getCompatibleFieldtypes($field); 
		foreach($fieldtypes as $type) {
			if(	!$type instanceof FieldtypeInteger && 
				!$type instanceof FieldtypeFloat &&
				$type != 'FieldtypeText') {

				$fieldtypes->remove($type); 
			}
		}
		return $fieldtypes; 
	}
	
	public function isEmptyValue(Field $field, $value) {
		if(($value === "0" || $value === 0) && $field->zeroNotEmpty) {
			// when zeroNotEmpty option is set, we don't count a literal "0" is being a blank value
			return false;
		}
		return empty($value); 
	}

	public function getBlankValue(Page $page, Field $field) {
		return '';
	}
	
	public function sanitizeValue(Page $page, Field $field, $value) {

		if(is_string($value) && strlen($value) && !is_numeric($value) && !ctype_digit($value)) {
			$value = preg_replace('/[^\d]/', '', $value);
		}
		$value = strlen("$value") ? (int) $value : '';

		return $value;

	}

	public function getInputfield(Page $page, Field $field) {
		$inputfield = $this->modules->get('InputfieldInteger'); 
		$inputfield->class = $this->className();
		return $inputfield; 
	}

	public function getDatabaseSchema(Field $field) {
		$schema = parent::getDatabaseSchema($field);
		$schema['data'] = 'int NOT NULL';
		return $schema;
	}
	
	public function ___getConfigInputfields(Field $field) {
		$inputfields = parent::___getConfigInputfields($field); 
		$f = $this->wire('modules')->get('InputfieldRadios'); 
		$f->label = $this->_('Are blank and 0 equivalent?'); 
		$f->description = $this->_('This affects how ProcessWire matches pages during database find operations.') . ' ' . 
			$this->_('If 0 and blank are equivalent (the Yes option) then a search for **field=0** or **field=""** will produce the same results.') . ' ' . 
			$this->_('If they or not equivalent (the No option) then a search for **field=0** will only match fields containing the value 0, and **field=""** will only match fields with no value.') . ' ' . 
			$this->_('As another example, with the Yes option **field<1** would match both the value 0 and no value, and with the No option it would match only 0.'); 
		$f->attr('name', 'zeroNotEmpty'); 
		$f->addOption(0, $this->_('Yes - Blank and 0 are equivalent'));
		$f->addOption(1, $this->_('No - Blank and 0 have different meanings')); 
		$f->attr('value', (int) $field->zeroNotEmpty);
		$inputfields->add($f); 
		return $inputfields; 
	}

}

